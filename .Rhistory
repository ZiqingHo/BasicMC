tabsetPanel(
tabPanel("Conditional distribution",
sidebarLayout(
sidebarPanel(
numericInput("init",label = "Choose the initial state",
value = 1,min = 1,step = 1)
),
mainPanel(
helpText("Conditional distribution of each state: "),
tableOutput("conddist"))
)))
)
server<-function(input,output){
library(BasicMC)
condD<-reactive(
{if(input$method==1){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
statename<-unlist(strsplit(input$state,","))
trMatrix<-createtrMat(trMatrix,statename)
}else if(input$method==2){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-trMatrix[,-1]
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==3){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-stock(trMatrix,input$price,input$range)
}else if(input$method==4){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatr<-weather(trMatrix,input$weather,c("Sunny"),c("Cloudy"),c("Rainy"),input$other)
}
}
)
output$conddist <- renderTable(
condD()
)
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("R package 'BasicMC'"),
fluidRow(column(4,fileInput(inputId = "matrix",
label = "Upload the transition matrix",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
column(3,checkboxInput("header", "Header", TRUE))),
selectInput("method", label = "Choose a function to create a transition matrix from the data:",
choices = c("General 1" = 1 ,
"General 2" = 2 ,
"Stock" = 3,
"Weather" = 4),
selected = 1,width = '50%'),
helpText("Note: For general case, General 1 is used when the data is not a transition matrix. Otherwise, General 2 is used."),
sliderInput(inputId = "step",
label = "Choose the N-step",
width = '80%',
value = 1, min = 1, max = 100,step = 1),
conditionalPanel(
condition = "input.method == 1",
textInput("state",label = "Write down the states(use ',' to separate two states)",width = '50%')
),
fluidRow(column(4,
conditionalPanel(
condition = "input.method == 3",
numericInput("price",label = "Choose the index of the price column",
value = 3, min = 1, step = 1))),
column(5,conditionalPanel(
condition = "input.method == 3",
numericInput("range",label = "Choose the range for the state 'Non-significant'",
value = 10, min = 0, step = 0.1,width = '100%')
))),
fluidRow(column(12,
conditionalPanel(
condition = "input.method == 4",
helpText("Note: This function only read one weather type for each state. User needs to convert the data with several weather types that classified as that state into a single weather type."))),
column(5,
conditionalPanel(
condition = "input.method == 4",
numericInput("weather",label = "Choose the index of the weather column",
value = 2, min = 1, step = 1))),
column(4,
conditionalPanel(
condition = "input.method == 4",
textInput("other",
label = "Write down the other weather type")))
),
tabsetPanel(
tabPanel("Conditional distribution",
sidebarLayout(
sidebarPanel(
numericInput("init",label = "Choose the initial state",
value = 1,min = 1,step = 1)
),
mainPanel(
helpText("Conditional distribution of each state: "),
tableOutput("conddist"))
)))
)
server<-function(input,output){
library(BasicMC)
condD<-reactive(
{if(input$method==1){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
statename<-unlist(strsplit(input$state,","))
trMatrix<-createtrMat(trMatrix,statename)
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==2){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-trMatrix[,-1]
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==3){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-stock(trMatrix,input$price,input$range)
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==4){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatr<-weather(trMatrix,input$weather,c("Sunny"),c("Cloudy"),c("Rainy"),input$other)
l<-c(rep(0,nrow(trMatr)))
l[input$init]<-1
trMatrix<-condDist(trMatr,l,input$step)
}
}
)
output$conddist <- renderTable(
condD()
)
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/hoziq/Desktop/Markov Chain/rshinyapp/goodapp.R')
ui<-fluidPage(
titlePanel("R package 'BasicMC'"),
fluidRow(column(4,fileInput(inputId = "matrix",
label = "Upload the transition matrix",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
column(3,checkboxInput("header", "Header", TRUE))),
selectInput("method", label = "Choose a function to create a transition matrix from the data:",
choices = c("General 1" = 1 ,
"General 2" = 2 ,
"Stock" = 3,
"Weather" = 4),
selected = 1,width = '50%'),
helpText("Note: For general case, General 1 is used when the data is not a transition matrix. Otherwise, General 2 is used."),
sliderInput(inputId = "step",
label = "Choose the N-step",
width = '80%',
value = 1, min = 1, max = 100,step = 1),
conditionalPanel(
condition = "input.method == 1",
textInput("state",label = "Write down the states(use ',' to separate two states)",width = '50%')
),
fluidRow(column(4,
conditionalPanel(
condition = "input.method == 3",
numericInput("price",label = "Choose the index of the price column",
value = 3, min = 1, step = 1))),
column(5,conditionalPanel(
condition = "input.method == 3",
numericInput("range",label = "Choose the range for the state 'Non-significant'",
value = 10, min = 0, step = 0.1,width = '100%')
))),
fluidRow(column(12,
conditionalPanel(
condition = "input.method == 4",
helpText("Note: This function only read one weather type for each state. User needs to convert the data with several weather types that classified as that state into a single weather type."))),
column(5,
conditionalPanel(
condition = "input.method == 4",
numericInput("weather",label = "Choose the index of the weather column",
value = 2, min = 1, step = 1))),
column(4,
conditionalPanel(
condition = "input.method == 4",
textInput("other",
label = "Write down the other weather type")))
),
tabsetPanel(
tabPanel("Conditional distribution",
sidebarLayout(
sidebarPanel(
numericInput("init",label = "Choose the initial state",
min = 1,step = 1)
),
mainPanel(
helpText("Conditional distribution of each state: "),
tableOutput("conddist"))
)))
)
server<-function(input,output){
library(BasicMC)
cd<-reactive(unlist(strsplit(input$init,",")))
trMat<-reactive(
{if(input$method==1){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
statename<-unlist(strsplit(input$state,","))
trMatrix<-createtrMat(trMatrix,statename)
trMat<-condDist(trMatrix,input$init,input$step)
}else if(input$method==2){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-trMatrix[,-1]
trMat<-condDist(trMatrix,cd(),input$step)
}else if(input$method==3){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-stock(trMatrix,input$price,input$range)
trMat<-condDist(trMatrix,input$init,input$step)
}else if(input$method==4){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatr<-weather(trMatrix,input$weather,c("Sunny"),c("Cloudy"),c("Rainy"),input$other)
trMat<-condDist(trMatr,input$init,input$step)
}
}
)
output$conddist <- renderTable(
cond()
)
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("R package 'BasicMC'"),
fluidRow(column(4,fileInput(inputId = "matrix",
label = "Upload the transition matrix",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
column(3,checkboxInput("header", "Header", TRUE))),
selectInput("method", label = "Choose a function to create a transition matrix from the data:",
choices = c("General 1" = 1 ,
"General 2" = 2 ,
"Stock" = 3,
"Weather" = 4),
selected = 1,width = '50%'),
helpText("Note: For general case, General 1 is used when the data is not a transition matrix. Otherwise, General 2 is used."),
sliderInput(inputId = "step",
label = "Choose the N-step",
width = '80%',
value = 1, min = 1, max = 100,step = 1),
conditionalPanel(
condition = "input.method == 1",
textInput("state",label = "Write down the states(use ',' to separate two states)",width = '50%')
),
fluidRow(column(4,
conditionalPanel(
condition = "input.method == 3",
numericInput("price",label = "Choose the index of the price column",
value = 3, min = 1, step = 1))),
column(5,conditionalPanel(
condition = "input.method == 3",
numericInput("range",label = "Choose the range for the state 'Non-significant'",
value = 10, min = 0, step = 0.1,width = '100%')
))),
fluidRow(column(12,
conditionalPanel(
condition = "input.method == 4",
helpText("Note: This function only read one weather type for each state. User needs to convert the data with several weather types that classified as that state into a single weather type."))),
column(5,
conditionalPanel(
condition = "input.method == 4",
numericInput("weather",label = "Choose the index of the weather column",
value = 2, min = 1, step = 1))),
column(4,
conditionalPanel(
condition = "input.method == 4",
textInput("other",
label = "Write down the other weather type")))
),
tabsetPanel(
tabPanel("Conditional distribution",
sidebarLayout(
sidebarPanel(
numericInput("init",label = "Choose the initial state",
value = 1,min = 1,step = 1)
),
mainPanel(
helpText("Conditional distribution of each state: "),
tableOutput("conddist"))
)))
)
server<-function(input,output){
library(BasicMC)
condD<-reactive(
{if(input$method==1){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
statename<-unlist(strsplit(input$state,","))
trMatrix<-createtrMat(trMatrix,statename)
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==2){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-trMatrix[,-1]
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==3){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-stock(trMatrix,input$price,input$range)
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==4){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatr<-weather(trMatrix,input$weather,c("Sunny"),c("Cloudy"),c("Rainy"),input$other)
l<-c(rep(0,nrow(trMatr)))
l[input$init]<-1
trMatrix<-condDist(trMatr,l,input$step)
}
}
)
output$conddist <- renderTable(
condD()
)
}
shinyApp(ui = ui, server = server)
ui<-fluidPage(
titlePanel("R package 'BasicMC'"),
fluidRow(column(4,fileInput(inputId = "matrix",
label = "Upload the transition matrix",
accept = c(
"text/csv",
"text/comma-separated-values,text/plain",
".csv")
)
),
column(3,checkboxInput("header", "Header", TRUE))),
selectInput("method", label = "Choose a function to create a transition matrix from the data:",
choices = c("General 1" = 1 ,
"General 2" = 2 ,
"Stock" = 3,
"Weather" = 4),
selected = 1,width = '50%'),
helpText("Note: For general case, General 1 is used when the data is not a transition matrix. Otherwise, General 2 is used."),
sliderInput(inputId = "step",
label = "Choose the N-step",
width = '80%',
value = 1, min = 1, max = 100,step = 1),
conditionalPanel(
condition = "input.method == 1",
textInput("state",label = "Write down the states(use ',' to separate two states)",width = '50%')
),
fluidRow(column(4,
conditionalPanel(
condition = "input.method == 3",
numericInput("price",label = "Choose the index of the price column",
value = 3, min = 1, step = 1))),
column(5,conditionalPanel(
condition = "input.method == 3",
numericInput("range",label = "Choose the range for the state 'Non-significant'",
value = 10, min = 0, step = 0.1,width = '100%')
))),
fluidRow(column(12,
conditionalPanel(
condition = "input.method == 4",
helpText("Note: This function only read one weather type for each state. User needs to convert the data with several weather types that classified as that state into a single weather type."))),
column(5,
conditionalPanel(
condition = "input.method == 4",
numericInput("weather",label = "Choose the index of the weather column",
value = 2, min = 1, step = 1))),
column(4,
conditionalPanel(
condition = "input.method == 4",
textInput("other",
label = "Write down the other weather type")))
),
tabsetPanel(
tabPanel("Conditional distribution",
sidebarLayout(
sidebarPanel(
numericInput("init",label = "Choose the initial state",
value = 1,min = 1,step = 1)
),
mainPanel(
helpText("Conditional distribution of each state: "),
tableOutput("conddist"))
)))
)
server<-function(input,output){
library(BasicMC)
condD<-reactive(
{if(input$method==1){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
statename<-unlist(strsplit(input$state,","))
trMatrix<-createtrMat(trMatrix,statename)
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==2){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-trMatrix[,-1]
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==3){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatrix<-stock(trMatrix,input$price,input$range)
l<-c(rep(0,nrow(trMatrix)))
l[input$init]<-1
trMatrix<-condDist(trMatrix,l,input$step)
}else if(input$method==4){
inFile<-input$matrix
if (is.null(inFile))
return(NULL)
trMatrix<-read.csv(inFile$datapath, header = input$header)
trMatr<-weather(trMatrix,input$weather,c("Sunny"),c("Cloudy"),c("Rainy"),input$other)
l<-c(rep(0,nrow(trMatr)))
l[input$init]<-1
trMatrix<-condDist(trMatr,l,input$step)
}
}
)
output$conddist <- renderTable(
condD()
)
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/hoziq/Desktop/Markov Chain/rshinyapp/goodapp.R')
runApp('C:/Users/hoziq/Desktop/Markov Chain/rshinyapp/goodapp.R')
runApp('C:/Users/hoziq/Desktop/Markov Chain/rshinyapp/goodapp.R')
library(rsconnect)
library(rsconnect)
library(rsconnect)
library(rsconnect)
library(rsconnect)
library(rsconnect)
library(rsconnect)
library(rsconnect)
rsconnect::setAccountInfo(name='ziqingho',
token='33AC53CF0EC8A3C89F8E2C82B54B4D14',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ziqingho',
token='33AC53CF0EC8A3C89F8E2C82B54B4D14',
secret='5m/ZT+oOKYOrMGj2j04I1PDz23uyOc0Pdh3JIdf7')
rsconnect::deployApp('C:/Users/hoziq/Desktop/MATH3032')
rsconnect::deployApp('C:/Users/hoziq/Desktop/MATH3032')
library(shiny); runApp('C:/Users/hoziq/Desktop/Markov Chain/rshinyapp/goodapp.R')
runApp('C:/Users/hoziq/Desktop/MATH3032/BasicMCapp')
runApp('C:/Users/hoziq/Desktop/MATH3032/BasicMCapp')
runApp('C:/Users/hoziq/Desktop/Markov Chain/rshinyapp/BasicMCapp.R')
